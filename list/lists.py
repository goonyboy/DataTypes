#1
# Допустим, у нас есть список, содержащий первые 4 буквы латинского алфавита
letters = ['a', 'b', 'c', 'd']
print(letters)
# С помощью метода append() мы добавляем ещё один элемент в список
letters.append('e')
print(letters)                  #Видим, что добавился еще один элемент списка

print(len(letters))             #Длина списка
print(letters[-1])              #Смотрим последний элемент списка
print(letters[len(letters)-1])  #Вложенная конструкция предыдещей команды(уменьшаем нидекс на 1 и выводим последний элемент)

letters.append('f')             #Добавляем ещё одну букву
letters.append('g')             #И ещё одну
print(letters[len(letters)-1])  # g

#Использование отрицательных индексов для получения элементов с хвоста списка является не только удобным решением,
#но и рекомендуемым, как соответствующее философии Python.

print(letters[-1]) # g
print(letters[-4]) # d

#Изменение структуры списка может происходить не только путем её увеличения (добавления новых объектов),
#но и удаления уже существующих. Для этого можно использовать метод pop():
print(letters)
letters.pop()                   #Вызов метода без аргументов удаляет последний элемент списка
print(letters)
letters.pop(0)                  #Удаляем элемент с индексом 0 в списке (первый)
print(letters)                  

#2 Метод index
letters[0] = 'fish'             #Меняем элемент с индексом 0
letters[1] = 'd'                #Меняем элемент с индексом 0
print(letters)                  
print(letters.index('fish'))    #Узнаем индекс элемента содержащий fish
print(letters.index('d'))       #В списке две буквы d. Команда выведет индекс первой в списке
print(letters.index('d',2))     #В данном случае поиск будет начинаться с индекса 2

#3 Метод count
# Метод count работает так, как звучит. Он считает количество раз, когда значение появляется в списке.
animals = ['horse', 'cat', 'cat', 'rabbit']     #Создали список
print(animals.count('cat'))                     #Узнаем количество котов

#4 Метод sort
animals = ['horse', 'cat', 'cat', 'rabbit']     #Создали список
animals.sort()                                  #Сортируем по алфавиту
print(animals)                                  #['cat', 'cat', 'horse', 'rabbit']

numbers = [14, 2, 577, -15]                     #Создаем список с цифрами
numbers.sort()                                  #Сортируем по возрастанию
print(numbers)                                  #[-15, 2, 14, 577]
numbers.sort(reverse = True)                    #Сортируем по убыванию
print(numbers)                                  #[577, 14, 2, -15]

#5 Метод remove
# Данный метод удаляет первое вхождение значения в списке
numbers.remove(2)   #Удаляем элемент который содержит 2 и первый в списке
print(numbers)      #[577, 14, -15]

#6 Метод pop
#Метод pop удаляет элемент в указанном индексе. Этот метод также вернет элемент,
#который был удален из списка. В случае, если вы не указали индекс, он по умолчанию
#удалит элемент по последнему индексу.
numbers.pop(1)      #Удаляем элемент из списка с индексом 1
print(numbers)      #[577, -15]

#7 Метод extend
#Метод extend расширяет список, добавляя элементы. Преимущество над append в том,
#что вы можете добавлять списки.
numbers.extend([24, 14, 'not number'])  #Добавим в список три новых элемента
print(numbers)                          #[577, -15, 24, 14, 'not number']

#8 Метод insert
#Данный метод вставляет элемент перед указанным индексом
numbers.insert(1, 1)
print(numbers)                  #[577, 1, -15, 24, 14, 'not number']
numbers.insert(2, [0, 18])
print(numbers)                  #[577, 1, [0, 18], -15, 24, 14, 'not number']

#9 Операции над списками
list1 = [2, 3, 4, 1, 32]        #Создание списка
print(2 in list1)               #Находится ли элемент 2 в списке list1
print(32 not in list1)          #Осутствует ли элемент 32 в списке list1
print(len(list1))               #Длина списка
print(max(list1))               #Максимальное значение списка list1
print(min(list1))               #Минимальное значение списка list1
print(sum(list1))               #Сумма всех элементов списка list1

#10 Операторы + и * для списков

# + объединяет два списка.
list1 = [11, 23]
list2 = [1, 2]
list3 = list1 + list2
print(list3)

# * копирует элементы в списке.
list4 = [1, 2, 3, 4]
list5 = list4 * 3
print(list5)